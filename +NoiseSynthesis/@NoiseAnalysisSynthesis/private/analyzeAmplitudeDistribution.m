function [] = analyzeAmplitudeDistribution(obj)
%ANALYZEAMPLITUDEDISTRIBUTION Retrieve amplitude distribution parameters
% -------------------------------------------------------------------------
%
% Usage: [] = analyzeAmplitudeDistribution(obj)
%
%
% Author :  J.-A. Adrian (JA) <jens-alrik.adrian AT jade-hs.de>
% Date   :  30-Nov-2015 20:00:12
%

import NoiseSynthesis.external.*


analysisPrctile = [0.0, 100];

switch obj.ModelParameters.AmplitudeModel
    case 'alpha'
        import NoiseSynthesis.stbl_matlab.*
        
        obj.ModelParameters.Quantiles = prctile(...
            obj.AnalysisSignal, ...
            analysisPrctile ...
            );
        
        prc = prctile(obj.AnalysisSignal, [1,99]);
        analysisSig = obj.AnalysisSignal;
        analysisSig(analysisSig < prc(1)) = prc(1);
        analysisSig(analysisSig > prc(2)) = prc(2);
        
        obj.ModelParameters.CDF = stblfit(analysisSig);
        
    case 'gmm'
        import NoiseSynthesis.GMM_toolbox.*
        
        covarType = 'diag';
        p_delta_min = 0.01;
        numMaxLoops = 20;
        
        [initCenters,caClusterData] = ...
            LBG_VQ_codebook(...
            obj.AnalysisSignal, ...
            obj.ModelParameters.NumGaussModels, ...
            p_delta_min ...
            );
        
        stGMM = gmm_init(...
            size(obj.AnalysisSignal, 2), ...
            obj.ModelParameters.NumGaussModels, ...
            covarType, ...
            initCenters, ...
            caClusterData, ...
            length(obj.AnalysisSignal), ...
            p_delta_min ...
            );
        
        stGMM = gmm_em(...
            stGMM,...
            obj.AnalysisSignal, ...
            p_delta_min, ...
            numMaxLoops ...
            );
        
        obj.ModelParameters.Quantiles = prctile(...
            obj.AnalysisSignal, ...
            analysisPrctile ...
            );
        obj.ModelParameters.CDF = {...
            stGMM.mCenters, ...
            stGMM.vPriors, ...
            stGMM.mCovars ...
            };
        
        obj.ModelParameters.NumGaussModels = length(stGMM.mCenters);
        
    case 'full'
        [obj.ModelParameters.CDF,obj.ModelParameters.Quantiles] = ecdf(...
            obj.AnalysisSignal ...
            );
        
        obj.ModelParameters.CDF = ...
            (obj.ModelParameters.CDF(1:end-1) + obj.ModelParameters.CDF(2:end))/2;
        obj.ModelParameters.Quantiles = obj.ModelParameters.Quantiles(2:end);
        
    case 'percentile'
        cdf = 0:100;
        prc = prctile(obj.AnalysisSignal, cdf);
        
        obj.ModelParameters.Quantiles = prc;
        obj.ModelParameters.CDF       = cdf ./ 100;
        
    case 'pareto'
        % source for piecewise Pareto:
        % http://de.mathworks.com/help/stats/fit-a-nonparametric-distribution-with-pareto-tails.html
        
        quantiles = linspace(...
            min(obj.AnalysisSignal), ...
            max(obj.AnalysisSignal), ...
            1000 ...
            );
        
        normmean = mean(obj.AnalysisSignal);
        normstd  = std(obj.AnalysisSignal);
        
        midPDF = normpdf(quantiles, normmean, normstd);
        
        [densy, densx] = ksdensity(obj.AnalysisSignal, 'npoints', 1000);
        
        percRangeLower = [0.001, 0.20];
        percRangeUpper = [0.80,  0.999];
        
        idxLower = find(...
            quantiles >= prctile(obj.AnalysisSignal, ...
            percRangeLower(2)*100), ...
            1, 'first' ...
            );
        idxUpper = find(...
            quantiles >= prctile(obj.AnalysisSignal, ...
            percRangeUpper(1)*100), ...
            1, 'first' ...
            );
        
        perclower = intersections(...
            densx(1:idxLower), ...
            densy(1:idxLower), ...
            quantiles(1:idxLower), ...
            midPDF(1:idxLower) ...
            );
        percupper = intersections(...
            quantiles(idxUpper:end), ...
            midPDF(idxUpper:end), ...
            densx(idxUpper:end), ...
            densy(idxUpper:end) ...
            );
        
        [y, x] = ecdf(obj.AnalysisSignal);
        x = (x(1:end-1) + x(2:end)) / 2;
        y = (y(1:end-1) + y(2:end)) / 2;
        
        perclower = interp1(x, y, perclower, 'linear');
        percupper = interp1(x, y, percupper, 'linear');
        
        
        % if no intersections found: use defaults
        if isempty(perclower)
            perclower = 0.05;
        else
            perclower  = perclower(...
                perclower >= percRangeLower(1) & ...
                perclower <= percRangeLower(2) ...
                );
            perclower = perclower(1);
        end
        if isempty(percupper)
            percupper = 0.95;
        else
            percupper = percupper(...
                percupper >= percRangeUpper(1) & ...
                percupper <= percRangeUpper(2) ...
                );
            percupper = percupper(end);
        end
        
        partailsadjusted = paretotails(obj.AnalysisSignal,perclower,percupper);
        
        lowerParams = partailsadjusted.lowerparams;
        upperParams = partailsadjusted.upperparams;
        
        pl = partailsadjusted.boundary(1);
        pu = partailsadjusted.boundary(2);
        
        obj.ModelParameters.Quantiles = prctile(...
            obj.AnalysisSignal, ...
            [0, pl*100, pu*100, 100] ...
            );
        obj.ModelParameters.Quantiles(end+1:end+2) = [pl; pu];
        
        obj.ModelParameters.CDF = [
            lowerParams;
            normmean, normstd;
            upperParams ...
            ];
end




% End of file: analyzeAmplitudeDistribution.m
